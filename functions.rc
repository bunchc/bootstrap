#!/bin/bash
set -eux
# functions.rc
# Authors: Cody Bunch (bunchc@gmail.com)
#
# loads functions for boot strapping a new ubuntu host
# includes pulling in dotfiles and locking down with iptables
# and a hids/nids

# Supply your email here
[[ $"email_address" ]] || email_address="userdata@mailinator.com"

# Other things worth verifying / changing:
[[ "$(which iptables 2>/dev/null)" ]] && IPTABLES=$(which iptables)
[[ "$(which ip6tables 2>/dev/null)" ]] && IP6TABLES=$(which ip6tables)
[[ "$(which modprobe 2>/dev/null)" ]] && MODPROBE=$(which modprobe)

INT_INTF=eth1
EXT_INTF=eth0
INT_NET=$(ifconfig $INT_INTF | awk '/inet addr/ {split ($2,A,":"); print A[2]}')
EXT_NET=$(ifconfig $EXT_INTF | awk '/inet addr/ {split ($2,A,":"); print A[2]}')

dotfiles() {
    echo -e "\n[+] Installing dotfiles\n"
    chattr +i "$HOME/.ssh/"
    export github_user=bunchc
    curl -fsSL https://raw.github.com/$github_user/dotfiles/master/bin/dotfiles \
        | sudo bash
    chattr +i "$HOME"/.ssh/
}

install_rmate() {
    echo -e "\n[+] Installing rmate\n"
    mkdir -p "$HOME"/bin
    curl -Lo ~/bin/rmate \
        https://raw.githubusercontent.com/textmate/rmate/master/bin/rmate
    chmod a+x ~/bin/rmate
    [[ "$(ls "$HOME/.bash_profile" | wc -l 2> /dev/null)" == "1" ]] && {
        echo 'export PATH="$PATH:$HOME/bin"' >> "$HOME"/.bash_profile
    }
}

install_docker() {
    echo -e "\n[+] Installing docker\n"
    curl -sL https://get.docker.com/ | sudo bash
}

install_openshift() {
    echo -e "\n[+] Installing openshift\n"
    wget https://github.com/openshift/origin/releases/download/v1.4.1/openshift-origin-client-tools-v1.4.1-3f9807a-linux-64bit.tar.gz \
        -O /tmp/openshift.tar.gz
    return 0
}

install_packages() {
    echo -e "\n[+] Installing additional packages\n"
    export DEBIAN_FRONTEND=noninteractive
    sudo apt-get update -qq

    declare packages_file="${*:-packages}"
    for packagelist in $packages_file; do
        xargs -a <(awk '/^\s*[^#]/' "$packagelist") -r -- \
            sudo DEBIAN_FRONTEND=noninteractive apt-get -y \
                -o Dpkg::Options::="--force-confdef" \
                -o Dpkg::Options::="--force-confold" \
                install
    done

    install_rmate
    [[ "$INSTALL_DOCKER" ]] && install_docker
    [[ "$INSTALL_OPENSHIFT" ]] && install_openshift
}

enable_arm() {
    echo -e "\n[+] Enabling docker support for ARM\n"
    sudo apt-get install -qqy \
        --force-yes \
        --no-install-recommends \
        qemu-user-static \
        binfmt-support

    update-binfmts --enable qemu-arm
    update-binfmts --enable qemu-aarch64
}

configure_sysctl() {
    echo -e "\n[+] Hardening sysctl\n"
    # Sysctl
    echo "
    # IP Spoofing protection
    net.ipv4.conf.all.rp_filter = 1
    net.ipv4.conf.default.rp_filter = 1

    # Ignore ICMP broadcast requests
    net.ipv4.icmp_echo_ignore_broadcasts = 1

    # Disable source packet routing
    net.ipv4.conf.all.accept_source_route = 0
    net.ipv6.conf.all.accept_source_route = 0
    net.ipv4.conf.default.accept_source_route = 0
    net.ipv6.conf.default.accept_source_route = 0

    # Ignore send redirects
    net.ipv4.conf.all.send_redirects = 0
    net.ipv4.conf.default.send_redirects = 0

    # Block SYN attacks
    net.ipv4.tcp_syncookies = 1
    net.ipv4.tcp_max_syn_backlog = 2048
    net.ipv4.tcp_synack_retries = 2
    net.ipv4.tcp_syn_retries = 5

    # Log Martians
    net.ipv4.conf.all.log_martians = 1
    net.ipv4.icmp_ignore_bogus_error_responses = 1

    # Ignore ICMP redirects
    net.ipv4.conf.all.accept_redirects = 0
    net.ipv6.conf.all.accept_redirects = 0
    net.ipv4.conf.default.accept_redirects = 0
    net.ipv6.conf.default.accept_redirects = 0

    # Ignore Directed pings
    net.ipv4.icmp_echo_ignore_all = 1
    " | sudo tee -a /etc/sysctl.conf

    sudo sysctl -p
}

configure_iptables(){
    echo -e "\n[+] Configuring IPTABLES\n"
    # Firewall
    # Modified from http://www.cipherdyne.org/LinuxFirewalls/ch01/

    ### flush existing rules and set chain policy setting to DROP
    $IPTABLES -F
    $IPTABLES -F -t nat
    $IPTABLES -X
    $IPTABLES -P INPUT DROP
    $IPTABLES -P FORWARD DROP

    ### this policy does not handle IPv6 traffic except to drop it.
    #
    $IP6TABLES -P INPUT DROP
    $IP6TABLES -P OUTPUT DROP
    $IP6TABLES -P FORWARD DROP

    ### load connection-tracking modules
    #
    $MODPROBE ip_conntrack
    $MODPROBE iptable_nat
    $MODPROBE ip_conntrack_ftp
    $MODPROBE ip_nat_ftp

    ###### INPUT chain ######
    ### state tracking rules
    $IPTABLES -A INPUT -m conntrack --ctstate INVALID -j LOG --log-prefix "DROP INVALID " --log-ip-options --log-tcp-options
    $IPTABLES -A INPUT -m conntrack --ctstate INVALID -j DROP
    $IPTABLES -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

    ### anti-spoofing rules
    $IPTABLES -A INPUT -i $INT_INTF ! -s "$INT_NET" -j LOG --log-prefix "SPOOFED PKT "
    $IPTABLES -A INPUT -i $INT_INTF ! -s "$INT_NET" -j DROP

    ### ACCEPT rules
    $IPTABLES -A INPUT -i $INT_INTF -p tcp -s "$INT_NET" --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
    $IPTABLES -A INPUT -i $EXT_INTF -p tcp --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
    $IPTABLES -A INPUT -p icmp --icmp-type echo-request -j ACCEPT

    ### default INPUT LOG rule
    $IPTABLES -A INPUT ! -i lo -j LOG --log-prefix "DROP " --log-ip-options --log-tcp-options

    ### make sure that loopback traffic is accepted
    $IPTABLES -A INPUT -i lo -j ACCEPT

    ###### OUTPUT chain ######
    ### state tracking rules
    $IPTABLES -A OUTPUT -m conntrack --ctstate INVALID -j LOG --log-prefix "DROP INVALID " --log-ip-options --log-tcp-options
    $IPTABLES -A OUTPUT -m conntrack --ctstate INVALID -j DROP
    $IPTABLES -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

    ### default OUTPUT LOG rule
    $IPTABLES -A OUTPUT ! -o lo -j LOG --log-prefix "DROP " --log-ip-options --log-tcp-options

    ### make sure that loopback traffic is accepted
    $IPTABLES -A OUTPUT -o lo -j ACCEPT

    ###### FORWARD chain ######
    ### state tracking rules
    $IPTABLES -A FORWARD -m conntrack --ctstate INVALID -j LOG --log-prefix "DROP INVALID " --log-ip-options --log-tcp-options
    $IPTABLES -A FORWARD -m conntrack --ctstate INVALID -j DROP
    $IPTABLES -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

    ### anti-spoofing rules
    $IPTABLES -A FORWARD -i $INT_INTF ! -s "$INT_NET" -j LOG --log-prefix "SPOOFED PKT "
    $IPTABLES -A FORWARD -i $INT_INTF ! -s "$INT_NET" -j DROP
}

install_ids() {
    echo -e "\n[+] Installing IDS\n"
    sudo apt-get install -y fail2ban psad aide
    sudo aideinit
    sudo aide -u
}

log_reporting(){
    echo -e "\n[+] Configuring logwatch\n"
    hostname=$(hostname -f)

    sudo debconf-set-selections <<< "postfix postfix/mailname string $hostname"
    sudo debconf-set-selections <<< "postfix postfix/main_mailer_type string 'Internet Site'"
    sudo apt-get install -yf postfix logwatch

    echo "/usr/sbin/logwatch --output mail --mailto $email_address --detail high" \
        sudo tee -a /etc/cron.daily/00logwatch
}

hardening(){
    echo -e "\n[+] Starting Hardening\n"
    configure_sysctl
    configure_iptables
    log_reporting
    install_ids
}